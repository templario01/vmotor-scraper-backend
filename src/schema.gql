# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessTokenEntity {
  accessToken: String!
}

input AddFavoriteVehicleInput {
  vehicle: UuidInput!
}

type CreateAccountEntity {
  expirationTime: DateTime!
  message: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteFavoriteVehicleInput {
  vehicle: UuidInput!
}

input DeleteSearchInput {
  search: UuidInput!
}

"""Vehicle condition"""
enum GetVehicleCondition {
  ALL
  NEW
  USED
}

type Mutation {
  addFavoriteVehicleToUser(addFavoriteVehicleInput: AddFavoriteVehicleInput!): [SyncedVehicleEntity!]!
  deleteFavoriteVehicleToUser(deleteFavoriteVehicleInput: DeleteFavoriteVehicleInput!): [SyncedVehicleEntity!]!
  deleteSearch(deleteSearchInput: DeleteSearchInput!): [UserSearchEntity!]!
  resendEmail(email: String!): CreateAccountEntity!
  signIn(signInInput: SignInInput!): AccessTokenEntity!
  signUp(signUpInput: SignUpInput!): CreateAccountEntity!
  toggleUserNotifications(hasActiveNotifications: Boolean!): ToggleUserNotificationsEntity!
  verifyUser(code: String!): AccessTokenEntity!
}

type PaginatedUserSearchEntity {
  edges: [UserSearchEntityEdge!]
  endCursor: String
  hasNextPage: Boolean!
  nodes: [UserSearchEntity!]
  totalCount: Int!
}

type PaginatedVehicleEntity {
  edges: [SyncedVehicleEntityEdge!]
  endCursor: String
  hasNextPage: Boolean!
  nodes: [SyncedVehicleEntity!]
  totalCount: Int!
}

"""USD or PEN"""
enum PriceCurrency {
  PEN
  USD
}

type Query {
  getFavoriteVehicles(after: String, take: Int = 10): PaginatedVehicleEntity!
  getRecommendedVehicles(after: String, take: Int = 10): PaginatedVehicleEntity!
  getSearchHistory(after: String, take: Int = 10): PaginatedUserSearchEntity!
  getUserInfo: UserEntity!
  getVehiclesByAdvancedSearch(after: String, city: String, condition: GetVehicleCondition, searchName: String, take: Int = 10): PaginatedVehicleEntity!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
}

"""ACTIVE or INACTIVE"""
enum Status {
  ACTIVE
  INACTIVE
}

type SyncedVehicleEntity {
  condition: String!
  createdAt: DateTime!
  currency: PriceCurrency!
  description: String!
  externalId: String!
  frontImage: String
  images: String
  location: String
  mileage: Float
  originalPrice: Float
  price: Float
  status: Status!
  transmission: String
  updatedAt: DateTime!
  url: String!
  uuid: ID!
  website: WebsiteEntity
  year: Float!
}

type SyncedVehicleEntityEdge {
  cursor: String!
  node: SyncedVehicleEntity!
}

type ToggleUserNotificationsEntity {
  hasActiveNotifications: Boolean!
}

type UserEntity {
  email: String!
  favoriteVehicles(after: String, take: Int = 10): PaginatedVehicleEntity
  hasActiveNotifications: Boolean!
  lastSession: DateTime!
  searches(after: String, take: Int = 10): PaginatedUserSearchEntity
  uuid: ID!
}

type UserSearchEntity {
  createdAt: DateTime!
  text: String!
  uuid: ID!
}

type UserSearchEntityEdge {
  cursor: String!
  node: UserSearchEntity!
}

input UuidInput {
  uuid: ID!
}

type WebsiteEntity {
  createdAt: DateTime!
  name: String!
  updatedAt: DateTime!
  url: String!
  uuid: String!
}