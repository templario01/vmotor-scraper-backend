// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                   @id @default(autoincrement())
  uuid                   String                @unique @default(cuid())
  email                  String                @unique
  hasConfirmedEmail      Boolean               @default(false) @map("has_confirmed_email")
  password               String
  refreshToken           String?               @map("refresh_token")
  hasActiveNotifications Boolean               @default(false) @map("has_active_notifications")
  lastSession            DateTime              @default(now()) @map("lat_session")
  createdAt              DateTime              @default(now()) @map("created_at")
  vehicles               UserFavoriteVehicle[]
  validationCodes        EmailValidationCode[]
  searchs                Search[]

  @@map("user")
}

model Search {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  text      String
  search    Json
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @map("user_id")

  @@map("search")
}

model EmailValidationCode {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique @default(cuid())
  code           String
  expirationTime DateTime @map("expiration_time")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @map("user_id")

  @@map("email_validation_code")
}

model UserFavoriteVehicle {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  Int      @map("vehicle_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, vehicleId])
  @@map("user_favorite_vehicle")
}

model Website {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(cuid())
  name      String    @unique
  url       String    @unique
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  vehicle   Vehicle[]

  @@map("website")
}

model Vehicle {
  id            Int                   @id @default(autoincrement())
  uuid          String                @unique @default(cuid())
  externalId    String?               @unique @map("external_id")
  url           String
  description   String?
  year          Int?
  transmission  String?
  mileage       Decimal?              @default(0) @db.Decimal(12, 2)
  frontImage    String?               @map("front_image")
  images        String?
  location      String?
  condition     Condition?
  originalPrice Decimal?              @default(0) @map("original_price") @db.Decimal(12, 2)
  price         Decimal?              @default(0) @db.Decimal(12, 2)
  currency      Currency?
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @default(now()) @updatedAt @map("updated_at")
  website       Website?              @relation(fields: [websiteId], references: [id])
  websiteId     Int?                  @map("website_id")
  status        Status                @default(ACTIVE)
  users         UserFavoriteVehicle[]

  @@map("vehicle")
}

model ProxyConfig {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  expiresAt DateTime @map("expires_at")
  host      String
  port      Int

  @@map("proxy_config")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Condition {
  NEW
  USED
}

enum Currency {
  PEN
  USD
}

enum ServerName {
  VMOTOR
}
